var net = require('net');
var fs=require('fs');


var fs = require('fs');

function readLines(input, func) {
  var remaining = '';

  input.on('data', function(data) {
    remaining += data;
    //var index = remaining.indexOf('\n');
    //while (index > -1) {
      //var line = remaining.substring(0, index);
      //remaining = remaining.substring(index + 1);
      //func(line);
      //index = remaining.indexOf('\n');
  });

  input.on('end', function() {
    if (remaining.length > 0) {
      func(remaining);
    }
  });
}

function func(data) {
    var HOST = '192.168.25.1';
    var PORT = 80;
    
    var client = new net.Socket();
client.connect(PORT, HOST, function() {
    
	var a=data;
    console.log('CONNECTED TO: ' + HOST + ':' + PORT);
    // Write a message to the socket as soon as the client is connected, the server will receive it as message from the client 
    client.write(data);

});

// Add a 'data' event handler for the client socket
// data is what the server sent to this socket
client.on('data', function(data) {
    
    console.log('DATA: ' + data);
    // Close the client socket completely
    client.destroy();
    
});

// Add a 'close' event handler for the client socket
client.on('close', function() {
    console.log('Connection closed');
});
  console.log('Line: ' + data);
}

// Require the file system
  fs = require("fs");
// Watch the sim directory
fs.watch("F:\\test2\\", { persistent: true }, function (event, fileName) {
    var x =event;
    var y= "F:\\test2\\"+fileName;
    var fs = require("fs"); //Load the filesystem module
 var stats = fs.statSync(y)
 var fileSizeInBytes = stats["size"]//get the bytesize
console.log(fileSizeInBytes);
   
    var fs = require('fs');
var Buffer = require('buffer').Buffer;
var constants = require('constants');

fs.open(fileName, 'r', function(status, fd) {
    if (status) {
        console.log(status.message);
        return;
    }
    var buffer = new Buffer(100);
    fs.read(fd, buffer, 0, 100, fileSizeInBytes, function(err, num) { //fs.read(fd, buffer, offset, length, position, callback); 
        console.log(buffer.toString('utf-8', 0, num));
        var z=buffer.toString('utf-8', 0, num);
        
   });
});
    
    
    
    start(y,x);//go to function start
  console.log("Event: " + event + y+ fileSizeInBytes);
  console.log(fileName + "\n");
});

function start(y,x){
  console.log(x + "," +y);

var input = fs.createReadStream(y);
readLines(input, func);

}

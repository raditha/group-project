//watcher
var fs = require("fs");

fs.watch('F:\\test2\\', { persistent: true }, function (event, fileName) {
    
  var path= "F:\\test2\\"+fileName;
  console.log("Event: " + event + path /*+ fileSizeInBytes*/);
  console.log(fileName + "\n");
  
 var changedFileSize = readFileSize(path);
//  createDbConn();
 readDb(fileName);
 var readData = readfile(fileName,fileSize);
  updateDb(fileName,changedFileSize);
  serverConn(readData);
  //start(path,event);
  
});


//read file size
 function readFileSize(path){
 var fs = require("fs"); //Load the filesystem module
 var stats = fs.statSync(path);
 var fileSizeInBytes = stats["size"];
 console.log('file size =' + fileSizeInBytes);
 return fileSizeInBytes;
 }
 
 
//create db connection 
function createDbConn(){
var databaseUrl = "clientdb"; 
var collections = ["file"]
var db = require("mongojs").connect(databaseUrl, collections);
} 
 
 
 
//update file size in db 
function updateDb(fileName,changedFileSize){
    var databaseUrl = "clientdb"; 
var collections = ["file"]
var db = require("mongojs").connect(databaseUrl, collections);

 
 db.file.update({id:fileName}, {$set: {size: changedFileSize}}, function(err, updated) {
  if( err || !updated ) console.log("file size not updated");
  else console.log("file size updated");
});
} 
 
//read file size from db
function readDb(fileName,fn){
    var databaseUrl = "clientdb"; 
var collections = ["file"]
var db = require("mongojs").connect(databaseUrl, collections);

 
db.file.find({id:fileName},function(err,readfile){
	console.log(readfile);
    var x=readfile;
    fileSize=2;
	return (fileSize);   //check hw to rtrv size	
 });
}


//read file
function readFile(fileName,fileSize){
var fs = require("fs");
 
    fs.exists(fileName, function (exists) {
        if (exists) {
            fs.stat(fileName, function (error, stats) {
                fs.open(fileName, "r", function (error, fd) {
                    var buffer = new Buffer(stats.size); //buffer hvn file size nt required
					
                    fs.read(fd, buffer, 0, buffer.length, fileSize, function (error, bytesRead, buffer) {
                        var data = buffer.toString("utf8", 0, buffer.length);
                        console.log(data+"\n");
						
                        fs.close(fd);
                    });
                });
            });
			return (data);
        }
		else console.log("file does not exist");
    });
 }
 
 
 
//send data to server 
function serverConn(readData) {
    var HOST = '192.168.25.1';
    var PORT = 80;
    
    var client = new net.Socket();
client.connect(PORT, HOST, function(readData) {
    
	var a=data;
    console.log('CONNECTED TO: ' + HOST + ':' + PORT);
    // Write a message to the socket as soon as the client is connected, the server will receive it as message from the client 
    client.write(readData);
	console.log("\n data sent to server");
});


// Add a 'close' event handler for the client socket
client.on('close', function() {
    console.log('Connection closed \n');
});
  console.log('\n Line: ' + readData);
}
